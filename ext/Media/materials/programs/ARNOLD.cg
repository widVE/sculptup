//The simplest (EXACT, see remarks) perpixel lighting I could do is:
 //(though it still supports ambient and specular terms, so it could still be simpler :)
 
 //Note: lighting is done in object-space, in the frag shader
 void Ambient_vp(
		  float4 position : POSITION,
          out float4 oPosition : POSITION,
          out float4 colour    : COLOR,
          uniform float4x4 worldViewProj,
          uniform float4 ambient)
{
    oPosition = mul(worldViewProj, position);
    colour = ambient;
}
 
 void Simple_Perpixel_Vert(
             float2 uv 				: TEXCOORD0,
             float4 position 		: POSITION, 
             float3 normal   		: NORMAL,
			 float4 color			: COLOR,
             //vert shader input
             uniform float4 lightPosition,
             uniform float3 eyePosition,
             //both in object space
             uniform float4x4 worldviewproj, 
             out float4 oClipPos    : POSITION,
			 out float4 oColor		: COLOR,
             //pass to clipping
             out float4 oPos    	: TEXCOORD0,
             out float3 oNorm    	: TEXCOORD1,
             out float4 oLightPos   : TEXCOORD2,            
             out float3 oEyePos    	: TEXCOORD3,
             //ADDED BY EUGEN - support for texture with the per pixel lighting
             out float2 oUv       	: TEXCOORD4
             //pass to frag shader
              ) 
 { 
     oClipPos 	= mul(worldviewproj, position); 
     oPos 		= position;
     oNorm     	= normal; 
     oLightPos 	= lightPosition;
     oEyePos 	= eyePosition;
     oUv 		= uv;
	 oColor 	= color;
 } 
 
 void Simple_PerPixel_Frag(
			 float4 color			: COLOR,
             float4 pos         	: TEXCOORD0,
             float3 normal        	: TEXCOORD1, 
             float4 lightpos        : TEXCOORD2,
             float3 eyepos        	: TEXCOORD3,
             float2 uv        		: TEXCOORD4,
 
             uniform float4 lightDiffuse,
             uniform float4 lightSpecular,
             uniform float exponent,
 
             uniform float4 ambient,
             uniform sampler2D texture,
 
             out float4 oColor : COLOR 
 ) 
 {
     float3 N = normalize(normal);
     float3 EyeDir = normalize(eyepos - pos.xyz);
     float3 LightDir = normalize(lightpos.xyz -  (pos * lightpos.w));
     float3 HalfAngle = normalize(LightDir + EyeDir);
 
     float NdotL = dot(LightDir, N);
     float NdotH = dot(HalfAngle, N);
     float4 Lit = lit(NdotL,NdotH,exponent);
 
     float3 textColour = (tex2D(texture, uv).xyz - 0.5) * 2;

     //oColor = lightDiffuse * Lit.y + lightSpecular * Lit.z + ambient + float4(textColour, 1);
	 oColor = lightDiffuse * color * Lit.y  + lightSpecular * Lit.z;// + float4(textColour, 1);
 }